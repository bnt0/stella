// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#ifndef PROTOBUF_command_2eproto__INCLUDED
#define PROTOBUF_command_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace stellad {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_command_2eproto();
void protobuf_AssignDesc_command_2eproto();
void protobuf_ShutdownFile_command_2eproto();

class Control;
class ShortcutDefinition;
class Setting;

enum Control_SysAction {
  Control_SysAction_OTHER = 0,
  Control_SysAction_SHUTDOWN = 1,
  Control_SysAction_RELOAD = 2,
  Control_SysAction_IGNORE = 3,
  Control_SysAction_STATUS = 4,
  Control_SysAction_SAVE = 5,
  Control_SysAction_LIST = 6,
  Control_SysAction_RESPONSE = 7
};
bool Control_SysAction_IsValid(int value);
const Control_SysAction Control_SysAction_SysAction_MIN = Control_SysAction_OTHER;
const Control_SysAction Control_SysAction_SysAction_MAX = Control_SysAction_RESPONSE;
const int Control_SysAction_SysAction_ARRAYSIZE = Control_SysAction_SysAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* Control_SysAction_descriptor();
inline const ::std::string& Control_SysAction_Name(Control_SysAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    Control_SysAction_descriptor(), value);
}
inline bool Control_SysAction_Parse(
    const ::std::string& name, Control_SysAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Control_SysAction>(
    Control_SysAction_descriptor(), name, value);
}
enum ShortcutDefinition_Mode {
  ShortcutDefinition_Mode_DEFAULT = 0
};
bool ShortcutDefinition_Mode_IsValid(int value);
const ShortcutDefinition_Mode ShortcutDefinition_Mode_Mode_MIN = ShortcutDefinition_Mode_DEFAULT;
const ShortcutDefinition_Mode ShortcutDefinition_Mode_Mode_MAX = ShortcutDefinition_Mode_DEFAULT;
const int ShortcutDefinition_Mode_Mode_ARRAYSIZE = ShortcutDefinition_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ShortcutDefinition_Mode_descriptor();
inline const ::std::string& ShortcutDefinition_Mode_Name(ShortcutDefinition_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ShortcutDefinition_Mode_descriptor(), value);
}
inline bool ShortcutDefinition_Mode_Parse(
    const ::std::string& name, ShortcutDefinition_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShortcutDefinition_Mode>(
    ShortcutDefinition_Mode_descriptor(), name, value);
}
enum Action {
  MODIFY = 0,
  ADD = 1,
  REM = 2
};
bool Action_IsValid(int value);
const Action Action_MIN = MODIFY;
const Action Action_MAX = REM;
const int Action_ARRAYSIZE = Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Action_descriptor();
inline const ::std::string& Action_Name(Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Action_descriptor(), value);
}
inline bool Action_Parse(
    const ::std::string& name, Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Action>(
    Action_descriptor(), name, value);
}
// ===================================================================

class Control : public ::google::protobuf::Message {
 public:
  Control();
  virtual ~Control();

  Control(const Control& from);

  inline Control& operator=(const Control& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Control& default_instance();

  void Swap(Control* other);

  // implements Message ----------------------------------------------

  Control* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Control& from);
  void MergeFrom(const Control& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Control_SysAction SysAction;
  static const SysAction OTHER = Control_SysAction_OTHER;
  static const SysAction SHUTDOWN = Control_SysAction_SHUTDOWN;
  static const SysAction RELOAD = Control_SysAction_RELOAD;
  static const SysAction IGNORE = Control_SysAction_IGNORE;
  static const SysAction STATUS = Control_SysAction_STATUS;
  static const SysAction SAVE = Control_SysAction_SAVE;
  static const SysAction LIST = Control_SysAction_LIST;
  static const SysAction RESPONSE = Control_SysAction_RESPONSE;
  static inline bool SysAction_IsValid(int value) {
    return Control_SysAction_IsValid(value);
  }
  static const SysAction SysAction_MIN =
    Control_SysAction_SysAction_MIN;
  static const SysAction SysAction_MAX =
    Control_SysAction_SysAction_MAX;
  static const int SysAction_ARRAYSIZE =
    Control_SysAction_SysAction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SysAction_descriptor() {
    return Control_SysAction_descriptor();
  }
  static inline const ::std::string& SysAction_Name(SysAction value) {
    return Control_SysAction_Name(value);
  }
  static inline bool SysAction_Parse(const ::std::string& name,
      SysAction* value) {
    return Control_SysAction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .stellad.proto.Control.SysAction action = 1 [default = OTHER];
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline ::stellad::proto::Control_SysAction action() const;
  inline void set_action(::stellad::proto::Control_SysAction value);

  // repeated .stellad.proto.ShortcutDefinition shortcuts = 2;
  inline int shortcuts_size() const;
  inline void clear_shortcuts();
  static const int kShortcutsFieldNumber = 2;
  inline const ::stellad::proto::ShortcutDefinition& shortcuts(int index) const;
  inline ::stellad::proto::ShortcutDefinition* mutable_shortcuts(int index);
  inline ::stellad::proto::ShortcutDefinition* add_shortcuts();
  inline const ::google::protobuf::RepeatedPtrField< ::stellad::proto::ShortcutDefinition >&
      shortcuts() const;
  inline ::google::protobuf::RepeatedPtrField< ::stellad::proto::ShortcutDefinition >*
      mutable_shortcuts();

  // repeated .stellad.proto.Setting settings = 3;
  inline int settings_size() const;
  inline void clear_settings();
  static const int kSettingsFieldNumber = 3;
  inline const ::stellad::proto::Setting& settings(int index) const;
  inline ::stellad::proto::Setting* mutable_settings(int index);
  inline ::stellad::proto::Setting* add_settings();
  inline const ::google::protobuf::RepeatedPtrField< ::stellad::proto::Setting >&
      settings() const;
  inline ::google::protobuf::RepeatedPtrField< ::stellad::proto::Setting >*
      mutable_settings();

  // optional bool status = 4 [default = true];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline bool status() const;
  inline void set_status(bool value);

  // @@protoc_insertion_point(class_scope:stellad.proto.Control)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::stellad::proto::ShortcutDefinition > shortcuts_;
  int action_;
  bool status_;
  ::google::protobuf::RepeatedPtrField< ::stellad::proto::Setting > settings_;
  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static Control* default_instance_;
};
// -------------------------------------------------------------------

class ShortcutDefinition : public ::google::protobuf::Message {
 public:
  ShortcutDefinition();
  virtual ~ShortcutDefinition();

  ShortcutDefinition(const ShortcutDefinition& from);

  inline ShortcutDefinition& operator=(const ShortcutDefinition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShortcutDefinition& default_instance();

  void Swap(ShortcutDefinition* other);

  // implements Message ----------------------------------------------

  ShortcutDefinition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShortcutDefinition& from);
  void MergeFrom(const ShortcutDefinition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ShortcutDefinition_Mode Mode;
  static const Mode DEFAULT = ShortcutDefinition_Mode_DEFAULT;
  static inline bool Mode_IsValid(int value) {
    return ShortcutDefinition_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    ShortcutDefinition_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    ShortcutDefinition_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    ShortcutDefinition_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return ShortcutDefinition_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return ShortcutDefinition_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return ShortcutDefinition_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required .stellad.proto.Action action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline ::stellad::proto::Action action() const;
  inline void set_action(::stellad::proto::Action value);

  // optional string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional bool enabled = 4;
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 4;
  inline bool enabled() const;
  inline void set_enabled(bool value);

  // optional .stellad.proto.ShortcutDefinition.Mode mode = 5 [default = DEFAULT];
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 5;
  inline ::stellad::proto::ShortcutDefinition_Mode mode() const;
  inline void set_mode(::stellad::proto::ShortcutDefinition_Mode value);

  // @@protoc_insertion_point(class_scope:stellad.proto.ShortcutDefinition)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_enabled();
  inline void clear_has_enabled();
  inline void set_has_mode();
  inline void clear_has_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  int action_;
  bool enabled_;
  int mode_;
  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static ShortcutDefinition* default_instance_;
};
// -------------------------------------------------------------------

class Setting : public ::google::protobuf::Message {
 public:
  Setting();
  virtual ~Setting();

  Setting(const Setting& from);

  inline Setting& operator=(const Setting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Setting& default_instance();

  void Swap(Setting* other);

  // implements Message ----------------------------------------------

  Setting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Setting& from);
  void MergeFrom(const Setting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required .stellad.proto.Action act = 2;
  inline bool has_act() const;
  inline void clear_act();
  static const int kActFieldNumber = 2;
  inline ::stellad::proto::Action act() const;
  inline void set_act(::stellad::proto::Action value);

  // optional string val = 3;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const char* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  inline void set_allocated_val(::std::string* val);

  // @@protoc_insertion_point(class_scope:stellad.proto.Setting)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_act();
  inline void clear_has_act();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* val_;
  int act_;
  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static Setting* default_instance_;
};
// ===================================================================


// ===================================================================

// Control

// required .stellad.proto.Control.SysAction action = 1 [default = OTHER];
inline bool Control::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Control::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Control::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Control::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::stellad::proto::Control_SysAction Control::action() const {
  // @@protoc_insertion_point(field_get:stellad.proto.Control.action)
  return static_cast< ::stellad::proto::Control_SysAction >(action_);
}
inline void Control::set_action(::stellad::proto::Control_SysAction value) {
  assert(::stellad::proto::Control_SysAction_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:stellad.proto.Control.action)
}

// repeated .stellad.proto.ShortcutDefinition shortcuts = 2;
inline int Control::shortcuts_size() const {
  return shortcuts_.size();
}
inline void Control::clear_shortcuts() {
  shortcuts_.Clear();
}
inline const ::stellad::proto::ShortcutDefinition& Control::shortcuts(int index) const {
  // @@protoc_insertion_point(field_get:stellad.proto.Control.shortcuts)
  return shortcuts_.Get(index);
}
inline ::stellad::proto::ShortcutDefinition* Control::mutable_shortcuts(int index) {
  // @@protoc_insertion_point(field_mutable:stellad.proto.Control.shortcuts)
  return shortcuts_.Mutable(index);
}
inline ::stellad::proto::ShortcutDefinition* Control::add_shortcuts() {
  // @@protoc_insertion_point(field_add:stellad.proto.Control.shortcuts)
  return shortcuts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::stellad::proto::ShortcutDefinition >&
Control::shortcuts() const {
  // @@protoc_insertion_point(field_list:stellad.proto.Control.shortcuts)
  return shortcuts_;
}
inline ::google::protobuf::RepeatedPtrField< ::stellad::proto::ShortcutDefinition >*
Control::mutable_shortcuts() {
  // @@protoc_insertion_point(field_mutable_list:stellad.proto.Control.shortcuts)
  return &shortcuts_;
}

// repeated .stellad.proto.Setting settings = 3;
inline int Control::settings_size() const {
  return settings_.size();
}
inline void Control::clear_settings() {
  settings_.Clear();
}
inline const ::stellad::proto::Setting& Control::settings(int index) const {
  // @@protoc_insertion_point(field_get:stellad.proto.Control.settings)
  return settings_.Get(index);
}
inline ::stellad::proto::Setting* Control::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:stellad.proto.Control.settings)
  return settings_.Mutable(index);
}
inline ::stellad::proto::Setting* Control::add_settings() {
  // @@protoc_insertion_point(field_add:stellad.proto.Control.settings)
  return settings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::stellad::proto::Setting >&
Control::settings() const {
  // @@protoc_insertion_point(field_list:stellad.proto.Control.settings)
  return settings_;
}
inline ::google::protobuf::RepeatedPtrField< ::stellad::proto::Setting >*
Control::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:stellad.proto.Control.settings)
  return &settings_;
}

// optional bool status = 4 [default = true];
inline bool Control::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Control::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Control::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Control::clear_status() {
  status_ = true;
  clear_has_status();
}
inline bool Control::status() const {
  // @@protoc_insertion_point(field_get:stellad.proto.Control.status)
  return status_;
}
inline void Control::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:stellad.proto.Control.status)
}

// -------------------------------------------------------------------

// ShortcutDefinition

// required string key = 1;
inline bool ShortcutDefinition::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShortcutDefinition::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShortcutDefinition::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShortcutDefinition::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ShortcutDefinition::key() const {
  // @@protoc_insertion_point(field_get:stellad.proto.ShortcutDefinition.key)
  return *key_;
}
inline void ShortcutDefinition::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:stellad.proto.ShortcutDefinition.key)
}
inline void ShortcutDefinition::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:stellad.proto.ShortcutDefinition.key)
}
inline void ShortcutDefinition::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stellad.proto.ShortcutDefinition.key)
}
inline ::std::string* ShortcutDefinition::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stellad.proto.ShortcutDefinition.key)
  return key_;
}
inline ::std::string* ShortcutDefinition::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ShortcutDefinition::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stellad.proto.ShortcutDefinition.key)
}

// required .stellad.proto.Action action = 2;
inline bool ShortcutDefinition::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShortcutDefinition::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShortcutDefinition::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShortcutDefinition::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::stellad::proto::Action ShortcutDefinition::action() const {
  // @@protoc_insertion_point(field_get:stellad.proto.ShortcutDefinition.action)
  return static_cast< ::stellad::proto::Action >(action_);
}
inline void ShortcutDefinition::set_action(::stellad::proto::Action value) {
  assert(::stellad::proto::Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:stellad.proto.ShortcutDefinition.action)
}

// optional string value = 3;
inline bool ShortcutDefinition::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShortcutDefinition::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShortcutDefinition::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShortcutDefinition::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& ShortcutDefinition::value() const {
  // @@protoc_insertion_point(field_get:stellad.proto.ShortcutDefinition.value)
  return *value_;
}
inline void ShortcutDefinition::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:stellad.proto.ShortcutDefinition.value)
}
inline void ShortcutDefinition::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:stellad.proto.ShortcutDefinition.value)
}
inline void ShortcutDefinition::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stellad.proto.ShortcutDefinition.value)
}
inline ::std::string* ShortcutDefinition::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stellad.proto.ShortcutDefinition.value)
  return value_;
}
inline ::std::string* ShortcutDefinition::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ShortcutDefinition::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stellad.proto.ShortcutDefinition.value)
}

// optional bool enabled = 4;
inline bool ShortcutDefinition::has_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShortcutDefinition::set_has_enabled() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShortcutDefinition::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShortcutDefinition::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool ShortcutDefinition::enabled() const {
  // @@protoc_insertion_point(field_get:stellad.proto.ShortcutDefinition.enabled)
  return enabled_;
}
inline void ShortcutDefinition::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:stellad.proto.ShortcutDefinition.enabled)
}

// optional .stellad.proto.ShortcutDefinition.Mode mode = 5 [default = DEFAULT];
inline bool ShortcutDefinition::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShortcutDefinition::set_has_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShortcutDefinition::clear_has_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShortcutDefinition::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::stellad::proto::ShortcutDefinition_Mode ShortcutDefinition::mode() const {
  // @@protoc_insertion_point(field_get:stellad.proto.ShortcutDefinition.mode)
  return static_cast< ::stellad::proto::ShortcutDefinition_Mode >(mode_);
}
inline void ShortcutDefinition::set_mode(::stellad::proto::ShortcutDefinition_Mode value) {
  assert(::stellad::proto::ShortcutDefinition_Mode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:stellad.proto.ShortcutDefinition.mode)
}

// -------------------------------------------------------------------

// Setting

// required string key = 1;
inline bool Setting::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Setting::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Setting::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Setting::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Setting::key() const {
  // @@protoc_insertion_point(field_get:stellad.proto.Setting.key)
  return *key_;
}
inline void Setting::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:stellad.proto.Setting.key)
}
inline void Setting::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:stellad.proto.Setting.key)
}
inline void Setting::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stellad.proto.Setting.key)
}
inline ::std::string* Setting::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stellad.proto.Setting.key)
  return key_;
}
inline ::std::string* Setting::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Setting::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stellad.proto.Setting.key)
}

// required .stellad.proto.Action act = 2;
inline bool Setting::has_act() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Setting::set_has_act() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Setting::clear_has_act() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Setting::clear_act() {
  act_ = 0;
  clear_has_act();
}
inline ::stellad::proto::Action Setting::act() const {
  // @@protoc_insertion_point(field_get:stellad.proto.Setting.act)
  return static_cast< ::stellad::proto::Action >(act_);
}
inline void Setting::set_act(::stellad::proto::Action value) {
  assert(::stellad::proto::Action_IsValid(value));
  set_has_act();
  act_ = value;
  // @@protoc_insertion_point(field_set:stellad.proto.Setting.act)
}

// optional string val = 3;
inline bool Setting::has_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Setting::set_has_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Setting::clear_has_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Setting::clear_val() {
  if (val_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& Setting::val() const {
  // @@protoc_insertion_point(field_get:stellad.proto.Setting.val)
  return *val_;
}
inline void Setting::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    val_ = new ::std::string;
  }
  val_->assign(value);
  // @@protoc_insertion_point(field_set:stellad.proto.Setting.val)
}
inline void Setting::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    val_ = new ::std::string;
  }
  val_->assign(value);
  // @@protoc_insertion_point(field_set_char:stellad.proto.Setting.val)
}
inline void Setting::set_val(const char* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stellad.proto.Setting.val)
}
inline ::std::string* Setting::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    val_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stellad.proto.Setting.val)
  return val_;
}
inline ::std::string* Setting::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Setting::set_allocated_val(::std::string* val) {
  if (val_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete val_;
  }
  if (val) {
    set_has_val();
    val_ = val;
  } else {
    clear_has_val();
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stellad.proto.Setting.val)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace stellad

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::stellad::proto::Control_SysAction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stellad::proto::Control_SysAction>() {
  return ::stellad::proto::Control_SysAction_descriptor();
}
template <> struct is_proto_enum< ::stellad::proto::ShortcutDefinition_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stellad::proto::ShortcutDefinition_Mode>() {
  return ::stellad::proto::ShortcutDefinition_Mode_descriptor();
}
template <> struct is_proto_enum< ::stellad::proto::Action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stellad::proto::Action>() {
  return ::stellad::proto::Action_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_command_2eproto__INCLUDED
